name: Telerik-Github-Actions-Practice

on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install pycodestyle
    - name: Lint with pylint
      run: |
        python lint_test.py
    - name: Style with pycodestyle
      run: |
        pycodestyle *.py
    # - name: Unit testing
    #   run: |
    #     python3 -m doctest factorial.py
    #     steps:

    # Dani Rankov gave excellent reason why I need to 
    # ditch the scp approach - "Change your thinking from a pet to a herd".
    # So I'm migrating to a GitHub artifact and later on - to jFrog Artifactory
    # - name: CD part of the task - copy all files to destination port via ssh
    #   run: "scp -rC -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null * ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/gha/github-actions/"
    #   # TODO: Create unique directory on upload (in HH:MM:SS:DD:MM:YYYY format)
    #   # TODO: Migrate to rsync

    - uses: actions/checkout@v2
    - run: mkdir -p path/to/artifact
    - run: echo hello > path/to/artifact/world.txt

    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: path/to/artifact/world.txt

    # TODO - use hashi vault for secret management
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SSH_SLACK_WEBHOOK }}
        SLACK_CHANNEL: telerik-upskill-devops
        SLACK_USERNAME: shitBot

    - name: Snyk
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
